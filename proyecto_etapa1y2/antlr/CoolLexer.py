# Generated from c:\Users\A01339250\Documents\Programacion\proyecto-compiladores-2021\proyecto_etapa1y2\antlr\Cool.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2/")
        buf.write("\u0177\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\3\2\3")
        buf.write("\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\b\3\b\3\t")
        buf.write("\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3\f\3\r\3\r\3\16\3\16\3")
        buf.write("\17\3\17\3\20\3\20\3\21\3\21\3\22\3\22\3\22\3\23\3\23")
        buf.write("\3\24\3\24\3\24\3\25\3\25\3\25\3\25\7\25\u00b3\n\25\f")
        buf.write("\25\16\25\u00b6\13\25\3\25\3\25\3\25\3\25\3\25\3\26\3")
        buf.write("\26\3\26\3\26\7\26\u00c1\n\26\f\26\16\26\u00c4\13\26\3")
        buf.write("\26\3\26\3\27\6\27\u00c9\n\27\r\27\16\27\u00ca\3\27\3")
        buf.write("\27\3\30\3\30\3\31\3\31\3\32\3\32\3\33\3\33\3\34\3\34")
        buf.write("\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3#")
        buf.write("\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3(\3)\3)\3*\3*\3*\3*")
        buf.write("\3*\3*\3+\3+\3+\5+\u00fc\n+\3,\3,\3,\3,\3,\3,\3-\3-\3")
        buf.write("-\3.\3.\3.\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62")
        buf.write("\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\65\3\65\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66")
        buf.write("\3\67\3\67\3\67\3\67\3\67\3\67\38\38\38\38\38\39\39\3")
        buf.write("9\39\39\3:\3:\3:\3:\3;\3;\3;\3<\3<\3<\3<\3=\3=\3=\3=\3")
        buf.write("=\3>\3>\3>\3>\3>\3>\3?\3?\7?\u015d\n?\f?\16?\u0160\13")
        buf.write("?\3@\3@\7@\u0164\n@\f@\16@\u0167\13@\3A\6A\u016a\nA\r")
        buf.write("A\16A\u016b\3B\3B\3B\7B\u0171\nB\fB\16B\u0174\13B\3B\3")
        buf.write("B\3\u00b4\2C\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13")
        buf.write("\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26")
        buf.write("+\27-\30/\2\61\2\63\2\65\2\67\29\2;\2=\2?\2A\2C\2E\2G")
        buf.write("\2I\2K\2M\2O\2Q\2S\2U\2W\31Y\32[\33]\34_\35a\36c\37e ")
        buf.write("g!i\"k#m$o%q&s\'u(w)y*{+},\177-\u0081.\u0083/\3\2\34\4")
        buf.write("\2\f\f\17\17\5\2\13\f\17\17\"\"\4\2CCcc\4\2EEee\4\2FF")
        buf.write("ff\4\2GGgg\4\2HHhh\4\2JJjj\4\2KKkk\4\2NNnn\4\2PPpp\4\2")
        buf.write("QQqq\4\2RRrr\4\2TTtt\4\2UUuu\4\2VVvv\4\2WWww\4\2XXxx\4")
        buf.write("\2YYyy\5\2\62;CHch\n\2$$\61\61^^ddhhppttvv\3\2C\\\6\2")
        buf.write("\62;C\\aac|\3\2c|\3\2\62;\4\2$$^^\2\u016b\2\3\3\2\2\2")
        buf.write("\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r")
        buf.write("\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3")
        buf.write("\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2")
        buf.write("\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'")
        buf.write("\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2W\3\2\2\2\2")
        buf.write("Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2")
        buf.write("\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2")
        buf.write("\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2")
        buf.write("\2\2\2w\3\2\2\2\2y\3\2\2\2\2{\3\2\2\2\2}\3\2\2\2\2\177")
        buf.write("\3\2\2\2\2\u0081\3\2\2\2\2\u0083\3\2\2\2\3\u0085\3\2\2")
        buf.write("\2\5\u0087\3\2\2\2\7\u0089\3\2\2\2\t\u008b\3\2\2\2\13")
        buf.write("\u008d\3\2\2\2\r\u008f\3\2\2\2\17\u0091\3\2\2\2\21\u0093")
        buf.write("\3\2\2\2\23\u0096\3\2\2\2\25\u0098\3\2\2\2\27\u009a\3")
        buf.write("\2\2\2\31\u009c\3\2\2\2\33\u009e\3\2\2\2\35\u00a0\3\2")
        buf.write("\2\2\37\u00a2\3\2\2\2!\u00a4\3\2\2\2#\u00a6\3\2\2\2%\u00a9")
        buf.write("\3\2\2\2\'\u00ab\3\2\2\2)\u00ae\3\2\2\2+\u00bc\3\2\2\2")
        buf.write("-\u00c8\3\2\2\2/\u00ce\3\2\2\2\61\u00d0\3\2\2\2\63\u00d2")
        buf.write("\3\2\2\2\65\u00d4\3\2\2\2\67\u00d6\3\2\2\29\u00d8\3\2")
        buf.write("\2\2;\u00da\3\2\2\2=\u00dc\3\2\2\2?\u00de\3\2\2\2A\u00e0")
        buf.write("\3\2\2\2C\u00e2\3\2\2\2E\u00e4\3\2\2\2G\u00e6\3\2\2\2")
        buf.write("I\u00e8\3\2\2\2K\u00ea\3\2\2\2M\u00ec\3\2\2\2O\u00ee\3")
        buf.write("\2\2\2Q\u00f0\3\2\2\2S\u00f2\3\2\2\2U\u00f8\3\2\2\2W\u00fd")
        buf.write("\3\2\2\2Y\u0103\3\2\2\2[\u0106\3\2\2\2]\u0109\3\2\2\2")
        buf.write("_\u010c\3\2\2\2a\u0115\3\2\2\2c\u011c\3\2\2\2e\u0120\3")
        buf.write("\2\2\2g\u0125\3\2\2\2i\u012a\3\2\2\2k\u012f\3\2\2\2m\u0134")
        buf.write("\3\2\2\2o\u013a\3\2\2\2q\u013f\3\2\2\2s\u0144\3\2\2\2")
        buf.write("u\u0148\3\2\2\2w\u014b\3\2\2\2y\u014f\3\2\2\2{\u0154\3")
        buf.write("\2\2\2}\u015a\3\2\2\2\177\u0161\3\2\2\2\u0081\u0169\3")
        buf.write("\2\2\2\u0083\u016d\3\2\2\2\u0085\u0086\7=\2\2\u0086\4")
        buf.write("\3\2\2\2\u0087\u0088\7}\2\2\u0088\6\3\2\2\2\u0089\u008a")
        buf.write("\7\177\2\2\u008a\b\3\2\2\2\u008b\u008c\7*\2\2\u008c\n")
        buf.write("\3\2\2\2\u008d\u008e\7.\2\2\u008e\f\3\2\2\2\u008f\u0090")
        buf.write("\7+\2\2\u0090\16\3\2\2\2\u0091\u0092\7<\2\2\u0092\20\3")
        buf.write("\2\2\2\u0093\u0094\7>\2\2\u0094\u0095\7/\2\2\u0095\22")
        buf.write("\3\2\2\2\u0096\u0097\7B\2\2\u0097\24\3\2\2\2\u0098\u0099")
        buf.write("\7\60\2\2\u0099\26\3\2\2\2\u009a\u009b\7\u0080\2\2\u009b")
        buf.write("\30\3\2\2\2\u009c\u009d\7,\2\2\u009d\32\3\2\2\2\u009e")
        buf.write("\u009f\7/\2\2\u009f\34\3\2\2\2\u00a0\u00a1\7-\2\2\u00a1")
        buf.write("\36\3\2\2\2\u00a2\u00a3\7\61\2\2\u00a3 \3\2\2\2\u00a4")
        buf.write("\u00a5\7>\2\2\u00a5\"\3\2\2\2\u00a6\u00a7\7>\2\2\u00a7")
        buf.write("\u00a8\7?\2\2\u00a8$\3\2\2\2\u00a9\u00aa\7?\2\2\u00aa")
        buf.write("&\3\2\2\2\u00ab\u00ac\7?\2\2\u00ac\u00ad\7@\2\2\u00ad")
        buf.write("(\3\2\2\2\u00ae\u00af\7\61\2\2\u00af\u00b0\7,\2\2\u00b0")
        buf.write("\u00b4\3\2\2\2\u00b1\u00b3\13\2\2\2\u00b2\u00b1\3\2\2")
        buf.write("\2\u00b3\u00b6\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b4\u00b2")
        buf.write("\3\2\2\2\u00b5\u00b7\3\2\2\2\u00b6\u00b4\3\2\2\2\u00b7")
        buf.write("\u00b8\7,\2\2\u00b8\u00b9\7\61\2\2\u00b9\u00ba\3\2\2\2")
        buf.write("\u00ba\u00bb\b\25\2\2\u00bb*\3\2\2\2\u00bc\u00bd\7\61")
        buf.write("\2\2\u00bd\u00be\7\61\2\2\u00be\u00c2\3\2\2\2\u00bf\u00c1")
        buf.write("\n\2\2\2\u00c0\u00bf\3\2\2\2\u00c1\u00c4\3\2\2\2\u00c2")
        buf.write("\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c5\3\2\2\2")
        buf.write("\u00c4\u00c2\3\2\2\2\u00c5\u00c6\b\26\2\2\u00c6,\3\2\2")
        buf.write("\2\u00c7\u00c9\t\3\2\2\u00c8\u00c7\3\2\2\2\u00c9\u00ca")
        buf.write("\3\2\2\2\u00ca\u00c8\3\2\2\2\u00ca\u00cb\3\2\2\2\u00cb")
        buf.write("\u00cc\3\2\2\2\u00cc\u00cd\b\27\2\2\u00cd.\3\2\2\2\u00ce")
        buf.write("\u00cf\t\4\2\2\u00cf\60\3\2\2\2\u00d0\u00d1\t\5\2\2\u00d1")
        buf.write("\62\3\2\2\2\u00d2\u00d3\t\6\2\2\u00d3\64\3\2\2\2\u00d4")
        buf.write("\u00d5\t\7\2\2\u00d5\66\3\2\2\2\u00d6\u00d7\t\b\2\2\u00d7")
        buf.write("8\3\2\2\2\u00d8\u00d9\t\t\2\2\u00d9:\3\2\2\2\u00da\u00db")
        buf.write("\t\n\2\2\u00db<\3\2\2\2\u00dc\u00dd\t\13\2\2\u00dd>\3")
        buf.write("\2\2\2\u00de\u00df\t\f\2\2\u00df@\3\2\2\2\u00e0\u00e1")
        buf.write("\t\r\2\2\u00e1B\3\2\2\2\u00e2\u00e3\t\16\2\2\u00e3D\3")
        buf.write("\2\2\2\u00e4\u00e5\t\17\2\2\u00e5F\3\2\2\2\u00e6\u00e7")
        buf.write("\t\20\2\2\u00e7H\3\2\2\2\u00e8\u00e9\t\21\2\2\u00e9J\3")
        buf.write("\2\2\2\u00ea\u00eb\t\22\2\2\u00ebL\3\2\2\2\u00ec\u00ed")
        buf.write("\t\23\2\2\u00edN\3\2\2\2\u00ee\u00ef\t\24\2\2\u00efP\3")
        buf.write("\2\2\2\u00f0\u00f1\t\25\2\2\u00f1R\3\2\2\2\u00f2\u00f3")
        buf.write("\7w\2\2\u00f3\u00f4\5Q)\2\u00f4\u00f5\5Q)\2\u00f5\u00f6")
        buf.write("\5Q)\2\u00f6\u00f7\5Q)\2\u00f7T\3\2\2\2\u00f8\u00fb\7")
        buf.write("^\2\2\u00f9\u00fc\t\26\2\2\u00fa\u00fc\5S*\2\u00fb\u00f9")
        buf.write("\3\2\2\2\u00fb\u00fa\3\2\2\2\u00fcV\3\2\2\2\u00fd\u00fe")
        buf.write("\5\61\31\2\u00fe\u00ff\5=\37\2\u00ff\u0100\5/\30\2\u0100")
        buf.write("\u0101\5G$\2\u0101\u0102\5G$\2\u0102X\3\2\2\2\u0103\u0104")
        buf.write("\5\67\34\2\u0104\u0105\5;\36\2\u0105Z\3\2\2\2\u0106\u0107")
        buf.write("\5;\36\2\u0107\u0108\5\67\34\2\u0108\\\3\2\2\2\u0109\u010a")
        buf.write("\5;\36\2\u010a\u010b\5? \2\u010b^\3\2\2\2\u010c\u010d")
        buf.write("\5;\36\2\u010d\u010e\5? \2\u010e\u010f\59\35\2\u010f\u0110")
        buf.write("\5\65\33\2\u0110\u0111\5E#\2\u0111\u0112\5;\36\2\u0112")
        buf.write("\u0113\5I%\2\u0113\u0114\5G$\2\u0114`\3\2\2\2\u0115\u0116")
        buf.write("\5;\36\2\u0116\u0117\5G$\2\u0117\u0118\5M\'\2\u0118\u0119")
        buf.write("\5A!\2\u0119\u011a\5;\36\2\u011a\u011b\5\63\32\2\u011b")
        buf.write("b\3\2\2\2\u011c\u011d\5=\37\2\u011d\u011e\5\65\33\2\u011e")
        buf.write("\u011f\5I%\2\u011fd\3\2\2\2\u0120\u0121\5=\37\2\u0121")
        buf.write("\u0122\5A!\2\u0122\u0123\5A!\2\u0123\u0124\5C\"\2\u0124")
        buf.write("f\3\2\2\2\u0125\u0126\5C\"\2\u0126\u0127\5A!\2\u0127\u0128")
        buf.write("\5A!\2\u0128\u0129\5=\37\2\u0129h\3\2\2\2\u012a\u012b")
        buf.write("\5I%\2\u012b\u012c\59\35\2\u012c\u012d\5\65\33\2\u012d")
        buf.write("\u012e\5? \2\u012ej\3\2\2\2\u012f\u0130\5\65\33\2\u0130")
        buf.write("\u0131\5=\37\2\u0131\u0132\5G$\2\u0132\u0133\5\65\33\2")
        buf.write("\u0133l\3\2\2\2\u0134\u0135\5O(\2\u0135\u0136\59\35\2")
        buf.write("\u0136\u0137\5;\36\2\u0137\u0138\5=\37\2\u0138\u0139\5")
        buf.write("\65\33\2\u0139n\3\2\2\2\u013a\u013b\5\61\31\2\u013b\u013c")
        buf.write("\5/\30\2\u013c\u013d\5G$\2\u013d\u013e\5\65\33\2\u013e")
        buf.write("p\3\2\2\2\u013f\u0140\5\65\33\2\u0140\u0141\5G$\2\u0141")
        buf.write("\u0142\5/\30\2\u0142\u0143\5\61\31\2\u0143r\3\2\2\2\u0144")
        buf.write("\u0145\5? \2\u0145\u0146\5\65\33\2\u0146\u0147\5O(\2\u0147")
        buf.write("t\3\2\2\2\u0148\u0149\5A!\2\u0149\u014a\5\67\34\2\u014a")
        buf.write("v\3\2\2\2\u014b\u014c\5? \2\u014c\u014d\5A!\2\u014d\u014e")
        buf.write("\5I%\2\u014ex\3\2\2\2\u014f\u0150\5I%\2\u0150\u0151\5")
        buf.write("E#\2\u0151\u0152\5K&\2\u0152\u0153\5\65\33\2\u0153z\3")
        buf.write("\2\2\2\u0154\u0155\5\67\34\2\u0155\u0156\5/\30\2\u0156")
        buf.write("\u0157\5=\37\2\u0157\u0158\5G$\2\u0158\u0159\5\65\33\2")
        buf.write("\u0159|\3\2\2\2\u015a\u015e\t\27\2\2\u015b\u015d\t\30")
        buf.write("\2\2\u015c\u015b\3\2\2\2\u015d\u0160\3\2\2\2\u015e\u015c")
        buf.write("\3\2\2\2\u015e\u015f\3\2\2\2\u015f~\3\2\2\2\u0160\u015e")
        buf.write("\3\2\2\2\u0161\u0165\t\31\2\2\u0162\u0164\t\30\2\2\u0163")
        buf.write("\u0162\3\2\2\2\u0164\u0167\3\2\2\2\u0165\u0163\3\2\2\2")
        buf.write("\u0165\u0166\3\2\2\2\u0166\u0080\3\2\2\2\u0167\u0165\3")
        buf.write("\2\2\2\u0168\u016a\t\32\2\2\u0169\u0168\3\2\2\2\u016a")
        buf.write("\u016b\3\2\2\2\u016b\u0169\3\2\2\2\u016b\u016c\3\2\2\2")
        buf.write("\u016c\u0082\3\2\2\2\u016d\u0172\7$\2\2\u016e\u0171\5")
        buf.write("U+\2\u016f\u0171\n\33\2\2\u0170\u016e\3\2\2\2\u0170\u016f")
        buf.write("\3\2\2\2\u0171\u0174\3\2\2\2\u0172\u0170\3\2\2\2\u0172")
        buf.write("\u0173\3\2\2\2\u0173\u0175\3\2\2\2\u0174\u0172\3\2\2\2")
        buf.write("\u0175\u0176\7$\2\2\u0176\u0084\3\2\2\2\f\2\u00b4\u00c2")
        buf.write("\u00ca\u00fb\u015e\u0165\u016b\u0170\u0172\3\b\2\2")
        return buf.getvalue()


class CoolLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    COMMENT = 20
    LINE_COMMENT = 21
    WS = 22
    KLASS = 23
    FI = 24
    IF = 25
    IN = 26
    INHERITS = 27
    ISVOID = 28
    LET = 29
    LOOP = 30
    POOL = 31
    THEN = 32
    ELSE = 33
    WHILE = 34
    CASE = 35
    ESAC = 36
    NEW = 37
    OF = 38
    NOT = 39
    TRUE = 40
    FALSE = 41
    TYPE = 42
    ID = 43
    INT = 44
    STRING = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "'('", "','", "')'", "':'", "'<-'", "'@'", 
            "'.'", "'~'", "'*'", "'-'", "'+'", "'/'", "'<'", "'<='", "'='", 
            "'=>'" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "LINE_COMMENT", "WS", "KLASS", "FI", "IF", "IN", 
            "INHERITS", "ISVOID", "LET", "LOOP", "POOL", "THEN", "ELSE", 
            "WHILE", "CASE", "ESAC", "NEW", "OF", "NOT", "TRUE", "FALSE", 
            "TYPE", "ID", "INT", "STRING" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "COMMENT", 
                  "LINE_COMMENT", "WS", "A", "C", "D", "E", "F", "H", "I", 
                  "L", "N", "O", "P", "R", "S", "T", "U", "V", "W", "HEX", 
                  "UNICODE", "ESC", "KLASS", "FI", "IF", "IN", "INHERITS", 
                  "ISVOID", "LET", "LOOP", "POOL", "THEN", "ELSE", "WHILE", 
                  "CASE", "ESAC", "NEW", "OF", "NOT", "TRUE", "FALSE", "TYPE", 
                  "ID", "INT", "STRING" ]

    grammarFileName = "Cool.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


