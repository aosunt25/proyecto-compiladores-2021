# Generated from c:\Users\A01339250\Documents\Programacion\proyecto-compiladores-2021\proyecto_etapa1y2\antlr\Cool.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2-")
        buf.write("\u0151\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\4=\t=\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6")
        buf.write("\3\6\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\13\3\13\3\f")
        buf.write("\3\f\3\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3")
        buf.write("\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\25\7\25\u00a9\n\25\f\25\16\25\u00ac\13\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\26\3\26\3\26\3\26\7\26\u00b7\n\26\f")
        buf.write("\26\16\26\u00ba\13\26\3\26\3\26\3\27\6\27\u00bf\n\27\r")
        buf.write("\27\16\27\u00c0\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32")
        buf.write("\3\33\3\33\3\34\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3 ")
        buf.write("\3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3\'\3\'\3(\3")
        buf.write("(\3)\3)\3)\3)\3)\3)\3*\3*\3*\3+\3+\3+\3,\3,\3,\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3/\3/\3/\3/\3")
        buf.write("\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\61\3\62")
        buf.write("\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63\3\63\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3\65\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\67\3\67\3\67\3\67\38\38\38\39\39\39")
        buf.write("\39\3:\3:\3:\3:\3:\3;\3;\3;\3;\3;\3;\3<\3<\7<\u0146\n")
        buf.write("<\f<\16<\u0149\13<\3=\3=\7=\u014d\n=\f=\16=\u0150\13=")
        buf.write("\3\u00aa\2>\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25")
        buf.write("\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+")
        buf.write("\27-\30/\2\61\2\63\2\65\2\67\29\2;\2=\2?\2A\2C\2E\2G\2")
        buf.write("I\2K\2M\2O\2Q\31S\32U\33W\34Y\35[\36]\37_ a!c\"e#g$i%")
        buf.write("k&m\'o(q)s*u+w,y-\3\2\30\4\2\f\f\17\17\5\2\13\f\17\17")
        buf.write("\"\"\4\2CCcc\4\2EEee\4\2FFff\4\2GGgg\4\2HHhh\4\2JJjj\4")
        buf.write("\2KKkk\4\2NNnn\4\2PPpp\4\2QQqq\4\2RRrr\4\2TTtt\4\2UUu")
        buf.write("u\4\2VVvv\4\2WWww\4\2XXxx\4\2YYyy\3\2C\\\6\2\62;C\\aa")
        buf.write("c|\3\2c|\2\u0144\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2")
        buf.write("\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21")
        buf.write("\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3")
        buf.write("\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2")
        buf.write("\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2")
        buf.write("\2\2\2-\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3")
        buf.write("\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a")
        buf.write("\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2")
        buf.write("k\3\2\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2")
        buf.write("\2u\3\2\2\2\2w\3\2\2\2\2y\3\2\2\2\3{\3\2\2\2\5}\3\2\2")
        buf.write("\2\7\177\3\2\2\2\t\u0081\3\2\2\2\13\u0083\3\2\2\2\r\u0085")
        buf.write("\3\2\2\2\17\u0087\3\2\2\2\21\u0089\3\2\2\2\23\u008c\3")
        buf.write("\2\2\2\25\u008e\3\2\2\2\27\u0090\3\2\2\2\31\u0093\3\2")
        buf.write("\2\2\33\u0095\3\2\2\2\35\u0097\3\2\2\2\37\u0099\3\2\2")
        buf.write("\2!\u009b\3\2\2\2#\u009d\3\2\2\2%\u009f\3\2\2\2\'\u00a2")
        buf.write("\3\2\2\2)\u00a4\3\2\2\2+\u00b2\3\2\2\2-\u00be\3\2\2\2")
        buf.write("/\u00c4\3\2\2\2\61\u00c6\3\2\2\2\63\u00c8\3\2\2\2\65\u00ca")
        buf.write("\3\2\2\2\67\u00cc\3\2\2\29\u00ce\3\2\2\2;\u00d0\3\2\2")
        buf.write("\2=\u00d2\3\2\2\2?\u00d4\3\2\2\2A\u00d6\3\2\2\2C\u00d8")
        buf.write("\3\2\2\2E\u00da\3\2\2\2G\u00dc\3\2\2\2I\u00de\3\2\2\2")
        buf.write("K\u00e0\3\2\2\2M\u00e2\3\2\2\2O\u00e4\3\2\2\2Q\u00e6\3")
        buf.write("\2\2\2S\u00ec\3\2\2\2U\u00ef\3\2\2\2W\u00f2\3\2\2\2Y\u00f5")
        buf.write("\3\2\2\2[\u00fe\3\2\2\2]\u0105\3\2\2\2_\u0109\3\2\2\2")
        buf.write("a\u010e\3\2\2\2c\u0113\3\2\2\2e\u0118\3\2\2\2g\u011d\3")
        buf.write("\2\2\2i\u0123\3\2\2\2k\u0128\3\2\2\2m\u012d\3\2\2\2o\u0131")
        buf.write("\3\2\2\2q\u0134\3\2\2\2s\u0138\3\2\2\2u\u013d\3\2\2\2")
        buf.write("w\u0143\3\2\2\2y\u014a\3\2\2\2{|\7=\2\2|\4\3\2\2\2}~\7")
        buf.write("}\2\2~\6\3\2\2\2\177\u0080\7\177\2\2\u0080\b\3\2\2\2\u0081")
        buf.write("\u0082\7*\2\2\u0082\n\3\2\2\2\u0083\u0084\7.\2\2\u0084")
        buf.write("\f\3\2\2\2\u0085\u0086\7+\2\2\u0086\16\3\2\2\2\u0087\u0088")
        buf.write("\7<\2\2\u0088\20\3\2\2\2\u0089\u008a\7>\2\2\u008a\u008b")
        buf.write("\7/\2\2\u008b\22\3\2\2\2\u008c\u008d\7B\2\2\u008d\24\3")
        buf.write("\2\2\2\u008e\u008f\7\60\2\2\u008f\26\3\2\2\2\u0090\u0091")
        buf.write("\7?\2\2\u0091\u0092\7@\2\2\u0092\30\3\2\2\2\u0093\u0094")
        buf.write("\7\u0080\2\2\u0094\32\3\2\2\2\u0095\u0096\7,\2\2\u0096")
        buf.write("\34\3\2\2\2\u0097\u0098\7/\2\2\u0098\36\3\2\2\2\u0099")
        buf.write("\u009a\7-\2\2\u009a \3\2\2\2\u009b\u009c\7\61\2\2\u009c")
        buf.write("\"\3\2\2\2\u009d\u009e\7>\2\2\u009e$\3\2\2\2\u009f\u00a0")
        buf.write("\7>\2\2\u00a0\u00a1\7?\2\2\u00a1&\3\2\2\2\u00a2\u00a3")
        buf.write("\7?\2\2\u00a3(\3\2\2\2\u00a4\u00a5\7\61\2\2\u00a5\u00a6")
        buf.write("\7,\2\2\u00a6\u00aa\3\2\2\2\u00a7\u00a9\13\2\2\2\u00a8")
        buf.write("\u00a7\3\2\2\2\u00a9\u00ac\3\2\2\2\u00aa\u00ab\3\2\2\2")
        buf.write("\u00aa\u00a8\3\2\2\2\u00ab\u00ad\3\2\2\2\u00ac\u00aa\3")
        buf.write("\2\2\2\u00ad\u00ae\7,\2\2\u00ae\u00af\7\61\2\2\u00af\u00b0")
        buf.write("\3\2\2\2\u00b0\u00b1\b\25\2\2\u00b1*\3\2\2\2\u00b2\u00b3")
        buf.write("\7\61\2\2\u00b3\u00b4\7\61\2\2\u00b4\u00b8\3\2\2\2\u00b5")
        buf.write("\u00b7\n\2\2\2\u00b6\u00b5\3\2\2\2\u00b7\u00ba\3\2\2\2")
        buf.write("\u00b8\u00b6\3\2\2\2\u00b8\u00b9\3\2\2\2\u00b9\u00bb\3")
        buf.write("\2\2\2\u00ba\u00b8\3\2\2\2\u00bb\u00bc\b\26\2\2\u00bc")
        buf.write(",\3\2\2\2\u00bd\u00bf\t\3\2\2\u00be\u00bd\3\2\2\2\u00bf")
        buf.write("\u00c0\3\2\2\2\u00c0\u00be\3\2\2\2\u00c0\u00c1\3\2\2\2")
        buf.write("\u00c1\u00c2\3\2\2\2\u00c2\u00c3\b\27\2\2\u00c3.\3\2\2")
        buf.write("\2\u00c4\u00c5\t\4\2\2\u00c5\60\3\2\2\2\u00c6\u00c7\t")
        buf.write("\5\2\2\u00c7\62\3\2\2\2\u00c8\u00c9\t\6\2\2\u00c9\64\3")
        buf.write("\2\2\2\u00ca\u00cb\t\7\2\2\u00cb\66\3\2\2\2\u00cc\u00cd")
        buf.write("\t\b\2\2\u00cd8\3\2\2\2\u00ce\u00cf\t\t\2\2\u00cf:\3\2")
        buf.write("\2\2\u00d0\u00d1\t\n\2\2\u00d1<\3\2\2\2\u00d2\u00d3\t")
        buf.write("\13\2\2\u00d3>\3\2\2\2\u00d4\u00d5\t\f\2\2\u00d5@\3\2")
        buf.write("\2\2\u00d6\u00d7\t\r\2\2\u00d7B\3\2\2\2\u00d8\u00d9\t")
        buf.write("\16\2\2\u00d9D\3\2\2\2\u00da\u00db\t\17\2\2\u00dbF\3\2")
        buf.write("\2\2\u00dc\u00dd\t\20\2\2\u00ddH\3\2\2\2\u00de\u00df\t")
        buf.write("\21\2\2\u00dfJ\3\2\2\2\u00e0\u00e1\t\22\2\2\u00e1L\3\2")
        buf.write("\2\2\u00e2\u00e3\t\23\2\2\u00e3N\3\2\2\2\u00e4\u00e5\t")
        buf.write("\24\2\2\u00e5P\3\2\2\2\u00e6\u00e7\5\61\31\2\u00e7\u00e8")
        buf.write("\5=\37\2\u00e8\u00e9\5/\30\2\u00e9\u00ea\5G$\2\u00ea\u00eb")
        buf.write("\5G$\2\u00ebR\3\2\2\2\u00ec\u00ed\5\67\34\2\u00ed\u00ee")
        buf.write("\5;\36\2\u00eeT\3\2\2\2\u00ef\u00f0\5;\36\2\u00f0\u00f1")
        buf.write("\5\67\34\2\u00f1V\3\2\2\2\u00f2\u00f3\5;\36\2\u00f3\u00f4")
        buf.write("\5? \2\u00f4X\3\2\2\2\u00f5\u00f6\5;\36\2\u00f6\u00f7")
        buf.write("\5? \2\u00f7\u00f8\59\35\2\u00f8\u00f9\5\65\33\2\u00f9")
        buf.write("\u00fa\5E#\2\u00fa\u00fb\5;\36\2\u00fb\u00fc\5I%\2\u00fc")
        buf.write("\u00fd\5G$\2\u00fdZ\3\2\2\2\u00fe\u00ff\5;\36\2\u00ff")
        buf.write("\u0100\5G$\2\u0100\u0101\5M\'\2\u0101\u0102\5A!\2\u0102")
        buf.write("\u0103\5;\36\2\u0103\u0104\5\63\32\2\u0104\\\3\2\2\2\u0105")
        buf.write("\u0106\5=\37\2\u0106\u0107\5\65\33\2\u0107\u0108\5I%\2")
        buf.write("\u0108^\3\2\2\2\u0109\u010a\5=\37\2\u010a\u010b\5A!\2")
        buf.write("\u010b\u010c\5A!\2\u010c\u010d\5C\"\2\u010d`\3\2\2\2\u010e")
        buf.write("\u010f\5C\"\2\u010f\u0110\5A!\2\u0110\u0111\5A!\2\u0111")
        buf.write("\u0112\5=\37\2\u0112b\3\2\2\2\u0113\u0114\5I%\2\u0114")
        buf.write("\u0115\59\35\2\u0115\u0116\5\65\33\2\u0116\u0117\5? \2")
        buf.write("\u0117d\3\2\2\2\u0118\u0119\5\65\33\2\u0119\u011a\5=\37")
        buf.write("\2\u011a\u011b\5G$\2\u011b\u011c\5\65\33\2\u011cf\3\2")
        buf.write("\2\2\u011d\u011e\5O(\2\u011e\u011f\59\35\2\u011f\u0120")
        buf.write("\5;\36\2\u0120\u0121\5=\37\2\u0121\u0122\5\65\33\2\u0122")
        buf.write("h\3\2\2\2\u0123\u0124\5\61\31\2\u0124\u0125\5/\30\2\u0125")
        buf.write("\u0126\5G$\2\u0126\u0127\5\65\33\2\u0127j\3\2\2\2\u0128")
        buf.write("\u0129\5\65\33\2\u0129\u012a\5G$\2\u012a\u012b\5/\30\2")
        buf.write("\u012b\u012c\5\61\31\2\u012cl\3\2\2\2\u012d\u012e\5? ")
        buf.write("\2\u012e\u012f\5\65\33\2\u012f\u0130\5O(\2\u0130n\3\2")
        buf.write("\2\2\u0131\u0132\5A!\2\u0132\u0133\5\67\34\2\u0133p\3")
        buf.write("\2\2\2\u0134\u0135\5? \2\u0135\u0136\5A!\2\u0136\u0137")
        buf.write("\5I%\2\u0137r\3\2\2\2\u0138\u0139\5I%\2\u0139\u013a\5")
        buf.write("E#\2\u013a\u013b\5K&\2\u013b\u013c\5\65\33\2\u013ct\3")
        buf.write("\2\2\2\u013d\u013e\5\67\34\2\u013e\u013f\5/\30\2\u013f")
        buf.write("\u0140\5=\37\2\u0140\u0141\5G$\2\u0141\u0142\5\65\33\2")
        buf.write("\u0142v\3\2\2\2\u0143\u0147\t\25\2\2\u0144\u0146\t\26")
        buf.write("\2\2\u0145\u0144\3\2\2\2\u0146\u0149\3\2\2\2\u0147\u0145")
        buf.write("\3\2\2\2\u0147\u0148\3\2\2\2\u0148x\3\2\2\2\u0149\u0147")
        buf.write("\3\2\2\2\u014a\u014e\t\27\2\2\u014b\u014d\t\26\2\2\u014c")
        buf.write("\u014b\3\2\2\2\u014d\u0150\3\2\2\2\u014e\u014c\3\2\2\2")
        buf.write("\u014e\u014f\3\2\2\2\u014fz\3\2\2\2\u0150\u014e\3\2\2")
        buf.write("\2\b\2\u00aa\u00b8\u00c0\u0147\u014e\3\b\2\2")
        return buf.getvalue()


class CoolLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    COMMENT = 20
    LINE_COMMENT = 21
    WS = 22
    KLASS = 23
    FI = 24
    IF = 25
    IN = 26
    INHERITS = 27
    ISVOID = 28
    LET = 29
    LOOP = 30
    POOL = 31
    THEN = 32
    ELSE = 33
    WHILE = 34
    CASE = 35
    ESAC = 36
    NEW = 37
    OF = 38
    NOT = 39
    TRUE = 40
    FALSE = 41
    TYPE = 42
    ID = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'{'", "'}'", "'('", "','", "')'", "':'", "'<-'", "'@'", 
            "'.'", "'=>'", "'~'", "'*'", "'-'", "'+'", "'/'", "'<'", "'<='", 
            "'='" ]

    symbolicNames = [ "<INVALID>",
            "COMMENT", "LINE_COMMENT", "WS", "KLASS", "FI", "IF", "IN", 
            "INHERITS", "ISVOID", "LET", "LOOP", "POOL", "THEN", "ELSE", 
            "WHILE", "CASE", "ESAC", "NEW", "OF", "NOT", "TRUE", "FALSE", 
            "TYPE", "ID" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "COMMENT", 
                  "LINE_COMMENT", "WS", "A", "C", "D", "E", "F", "H", "I", 
                  "L", "N", "O", "P", "R", "S", "T", "U", "V", "W", "KLASS", 
                  "FI", "IF", "IN", "INHERITS", "ISVOID", "LET", "LOOP", 
                  "POOL", "THEN", "ELSE", "WHILE", "CASE", "ESAC", "NEW", 
                  "OF", "NOT", "TRUE", "FALSE", "TYPE", "ID" ]

    grammarFileName = "Cool.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


